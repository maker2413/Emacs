#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle ./init.el

This is my emacs configuration. I write my entire configuration in org-mode
files and have setup functionality to auto-tangle these files upon save to their
appropriate elisp files. I will cover how this is done further in this document.

* Basic Configuration
  These are just some of the basic configurations to emacs like font settings,
  and enabling and disabling menus and toolbars. First lets define a heading to
  explain that our =init.el= file is being generated from this org file:
  #+begin_src emacs-lisp
    ;; -----------------------------------------------------------------------------
    ;; Note this file is generated from the README.org file. Any changes made to
    ;; this file will be wiped when new changes are added to the README.org. Please
    ;; edit the README.org for any changes you desire.
    ;; -----------------------------------------------------------------------------

  #+end_src

** General Configuration
   These are just the basic boiler plate configurations I make to my emacs
   configuration:
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)

     ;; Clean up the UI
     (if (display-graphic-p)
         (scroll-bar-mode -1))
     (tool-bar-mode -1)
     (tooltip-mode -1)

     (require 'fringe)
     (set-fringe-mode 10)

     (menu-bar-mode -1)

     ;; Flash instead of beep
     (setq visible-bell t)

     ;; Show line numbers
     (column-number-mode)
     (global-display-line-numbers-mode t)

     ;; Spaces > tabs
     (setq-default indent-tabs-mode nil)
     (setq tab-width 2)
     (setq c-basic-offset 2)
     (setq sh-basic-offset 2)

     ;; Set frame transparency
     (set-frame-parameter (selected-frame) 'alpha '(96 . 92))
     (add-to-list 'default-frame-alist '(alpha . (96 . 92)))
     (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
     (add-to-list 'default-frame-alist '(fullscreen . maximized))

   #+end_src

** Font Configuration
   Next I have my Font configurations like setting font family and sizes:
   #+begin_src emacs-lisp
     (set-face-attribute 'default nil :font "Fira Code Retina" :height 120)

   #+end_src

** Temp File Configuration
   I don't like the default emacs behavior of creating temporary files in the
   current directory of the file being edited. Although I think this is a great
   feature of emacs and didn't want to disable it complete so I move my backup
   and autosave directories to ~/tmp/~ which will only stay around until the
   device is rebooted:
   #+begin_src emacs-lisp
     ;; Change where temp files are stored
     (setq backup-directory-alist
           `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
           `((".*" ,temporary-file-directory t)))

   #+end_src

** Maximize Buffer
   I have this blob in my emacs config so I can have a keybinding with maximize
   a buffer on a toggle so I can temporarily focus on one thing when needed:
   #+begin_src emacs-lisp
     (defun toggle-maximize-buffer () "Maximize buffer"
       (interactive)
       (if (= 1 (length (window-list)))
           (jump-to-register '_)
         (progn
           (window-configuration-to-register '_)
           (delete-other-windows))))

     (global-set-key (kbd "C-c 1") 'toggle-maximize-buffer)

   #+end_src

* Package Configuration
  I first add melpa to the package repository and initialize packages. I also
  refresh packages contents if package archive contents doesn't exist. Finally I
  install ~use-package~ and set it to always assume ~ensure t~ for packages:
  #+begin_src emacs-lisp
    (require 'package)

    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    (unless (package-installed-p 'use-package)
      (package-install 'use-package))

    (require 'use-package)
    (setq use-package-always-ensure t)

  #+end_src

** Theming Packages
   These are just my packages that theme aspects of my emacs. I used to use the
   ~afternoon~ theme for my emacs config:
   #+begin_src emacs-lisp
     ;(use-package afternoon-theme)

   #+end_src

   I use ~doom-modeline~ to clean up the mode line display of emacs:
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :init (doom-modeline-mode t)
       :custom ((doom-modeline-height 10)))

   #+end_src

   I use the palenight theme from the ~doom-themes~ package in my emacs
   configuration:
   #+begin_src emacs-lisp
     (use-package doom-themes
       :init (load-theme 'doom-palenight t))

   #+end_src

   I also install ~all-the-icons~, this package simple adds support for icons
   throught emacs to make it look cleaner. It is important to note that to
   install the require resource fonts for this package you have to run: ~M-x
   all-the-icons-install-fonts~ after install this package:
   #+begin_src emacs-lisp
     (use-package all-the-icons)

   #+end_src

** Basic Packages
   These are just some basic packages I have in my emacs config. First we have
   ~diminish~. The diminish package allows minor modes to be hidden
   in the mode line display of emacs. We will utilize this later to in the
   config to clean up the mode line of some major modes:
   #+begin_src emacs-lisp
     (use-package diminish)

   #+end_src

   I used to use the ~rainbow-delimiters~ package to color code parenthesis and
   braces to tell them apart. I'm still on the fence about using this package so
   I am including it commented out:
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))

   #+end_src

** Helper Packages
   I use ~which-key~ in my configuration to display the possible keybindings
   available to me when I start typing a command. I think this helps me a lot
   without having to memorize every keybinding in emacs. I also use
   ~use-package~'s keywords to allow ~diminish~ to hide this minor mode from
   being displayed in the mode line display and to configure the delay before
   ~which-key~ shows the possible keybindings available:
   #+begin_src emacs-lisp
     (use-package which-key
       :init (which-key-mode t)
       :diminish
       :config
       (setq which-key-idls-delay 0.5))

   #+end_src

   I also use the ~helpful~ package to provide more contextual information when
   running help commands in emacs:
*** TODO Describe these bindings and custom functions!
   #+begin_src emacs-lisp
     (use-package helpful
       :custom
       (counsel-describe-function-function #'helpful-callable)
       (counsel-describe-variable-function #'helpful-variable)
       :bind
       ([remap describe-function] . counsel-describe-function)
       ([remap describe-command] . helpful-command)
       ([remap describe-variable] . counsel-describe-variable)
       ([remap describe-key] . helpful-key))

   #+end_src

** Ivy Software Configuration
   This section will cover the ~ivy~ package and its respective counter parts
   ~counsel~ and ~swiper~. It will also go over some enhancement packages like
   ~ivy-rich~. Lets begin by installing ~ivy~ which will also install ~counsel~
   and ~swiper~ for us. I will also be utilizing ~use-package~'s keywords to set
   a binding to use swiper and to configure ivy-mode to be started by default:
   #+begin_src emacs-lisp
     (use-package ivy
       :diminish
       :bind (("C-s" . swiper))
       :config
       (ivy-mode 1))

   #+end_src

   With ~ivy~ installed we did also get the ~counsel~ and ~swiper~ packages
   included, however I am going to use ~use-package~'s keywords to set some
   bindings for counsel functions:
   #+begin_src emacs-lisp
     (use-package counsel
       :bind(("M-x" . counsel-M-x)
             ("C-c r" . counsel-rg)
             ("C-x b" . counsel-switch-buffer))
       :custom
       (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only))
   #+end_src

   I use the ~ivy-rich~ package to enhance the look of ~ivy~ and ~counsel~
   functions. I also use the ~all-the-icons-ivy-rich~ package to use my icons
   font from the ~all-the-icons~ package:
   #+begin_src emacs-lisp
     (use-package all-the-icons-ivy-rich
       :init (all-the-icons-ivy-rich-mode 1))

     (use-package ivy-rich
       :init (ivy-rich-mode 1))

   #+end_src

** Hydra Configuration
   I use the ~hydra~ package to build out a hydra (menu) of commands to switch
   between windows, buffers, and frames. Essentially what this means is if I hit
   ~C-o~ a hydra will pop up and display a simple menu I made and prompt for key
   commands as to which window, buffer, or frame I want to swtich to:
   #+begin_src emacs-lisp
     (use-package hydra)

     (defhydra hydra-window (global-map "C-o"
                             :timeout 5
                             :hint nil)
       "
       ^Window Management^

       ^Windows^     ^Buffers^     ^Frame^
       ^^^^^^^^---------------------------------
       _f_: next     _n_: next     _TAB_: switch
       _b_: prev     _p_: prev     ^ ^
       "
       ("f" other-window)
       ("b" (other-window (- 1)))
       ("n" next-buffer)
       ("p" previous-buffer)
       ("TAB" other-frame)
       ("g" nil "cancel" :color blue))

   #+end_src

* Shell Configuration
  First I start with disabling line numbers in the ~eshell-mode~, ~shell-mode~,
  and ~term-mode~:
  #+begin_src emacs-lisp
    (dolist (mode '(eshell-mode-hook
                    shell-mode-hook
                    term-mode-hook
                    treemacs-mode-hook))
      (add-hook mode(lambda() (display-line-numbers-mode 0))))

  #+end_src

* Org Configuration
  Org or ~org-mode~ is probably the greatest aspect of emacs and I highly
  recommended looking at the documentation for a deeper understanding of what it
  can do: [[https://orgmode.org/][Org mode]]. Here are the very basics of my ~org-mode~ configuration:
  #+begin_src emacs-lisp
    ;; Make org mode auto new line after the 80th character
    (add-hook 'org-mode-hook '(lambda () (setq fill-column 80)))
    (add-hook 'org-mode-hook 'turn-on-auto-fill)

    ;; Updated last_modified heading if present after file save
    (add-hook 'org-mode-hook (lambda ()
                               (setq-local time-stamp-active t
                                           time-stamp-line-limit 8
                                           time-stamp-start "^#\\+last_modified: [ \t]*"
                                           time-stamp-end "$"
                                           time-stamp-format "\[%Y-%m-%d %a %H:%M:%S\]")
                               (add-hook 'before-save-hook 'time-stamp nil 'local)))

  #+end_src

** Org Babel Configuration
   This block will go over various configurations I have made to org-mode's
   babel feature. The most import of these is the ~heph/org-babel-tangle-config~
   function which will automatically tangle any org files in the
   ~~/.config/emacs/~ directory:
   #+begin_src emacs-lisp
     (setq org-confirm-babel-evaluate nil)

     ;; Automatically tangle our Emacs.org config file when we save it
     (defun heph/org-babel-tangle-config ()
       (when (or (string-equal (buffer-file-name)
                               (expand-file-name "~/.config/emacs/README.org"))
                 (string-equal (buffer-file-name)
                               (expand-file-name "~/.config/emacs/exwm/README.org")))
         ;; Dynamic scoping to the rescue
         (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))

     ;; Run org-babel-tangle-config function after save of org file
     (add-hook 'org-mode-hook
               (lambda ()
                 (add-hook 'after-save-hook #'heph/org-babel-tangle-config)))

   #+end_src

** Org Bullets
   The ~org-bullets~ packages simply allows us to "clean" up the ~*~ characters
   in front of our headers but making all but the last one invisible or to edit
   how the bullets appear. Here is the ~org-bullets~ setup I use in my emacs
   configuration:
   #+begin_src emacs-lisp
     (use-package org-bullets
       :after org
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "✸" "○")))
   #+end_src

** Org Mode Spell Check
   If you are like me and mistype things somewhat often you are going to want
   spell check in your org-mode config:
   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook 'flyspell-mode)

   #+end_src

** Structure Templates
   This block setups some org structure templates for various source blocks I
   use often. With these in place I can simply type ~<el~ and hit tab to
   generate an emacs lisp source block in my org file for example:
   #+begin_src emacs-lisp
     (require 'org-tempo)

     (add-to-list 'org-structure-template-alist '("ba" . "src bash"))
     ;; Remove "C" structure template to map "C" to "src C"
     (delete '("C" . "comment") org-structure-template-alist)
     (add-to-list 'org-structure-template-alist '("C" . "src c"))
     (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
     (add-to-list 'org-structure-template-alist '("ja" . "src java"))
     (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
     (add-to-list 'org-structure-template-alist '("json" . "src json"))
     (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
     (add-to-list 'org-structure-template-alist '("py" . "src python"))
     (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
     (add-to-list 'org-structure-template-alist '("ya" . "src yaml"))

  #+end_src

** Org Roam Configuration
   The ~org-roam~ package is a very interesting package and I recommened reading
   the documentation to truely understand its features: [[https://www.orgroam.com/][Org Roam]]. To summarize
   the ~org-roam~ package lets you implement the [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten]] method of writing
   notes using emacs org mode. Essentially you can turn your org mode notes into
   a "second brain" containing all of your combined knowledged with interlinking
   between related topics in an easily searchable way. Here is my configuration
   for the ~org-roam~ package:
   #+begin_src emacs-lisp
     (use-package org-roam
       :ensure t
       :init
       ;; Disable v2 warning message
       (setq org-roam-v2-ack t)
       :custom
       ;; My Roam Notes directory
       (org-roam-directory "~/Notes")
       (org-roam-capture-templates
        ;; My default org-roam template
        '(("c" "Concepts" plain
           (file "~/Notes/RoamTemplates/DefaultTemplate.org")
           :if-new (file+head
                    "Content/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: Concept")
           :unnarrowed t)
          ("d" "Default" plain
           (file "~/Notes/RoamTemplates/DefaultTemplate.org")
           :if-new (file+head
                    "Content/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n")
           :unnarrowed t)
          ("o" "One Off" plain
           (file "~/Notes/RoamTemplates/DefaultTemplate.org")
           :if-new (file+head
                    "Content/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: OneOff")
           :unnarrowed t)
          ("l" "Programming Language" plain
           (file "~/Notes/RoamTemplates/DefaultTemplate.org")
           :if-new (file+head
                    "Content/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: ProgrammingLanguage")
           :unnarrowed t)
          ("b" "Programming Language Basics" plain
           (file "~/Notes/RoamTemplates/DefaultTemplate.org")
           :if-new (file+head
                    "Content/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: ProgrammingLanguage Basics")
           :unnarrowed t)
          ("p" "Project" plain
           (file "~/Notes/RoamTemplates/ProjectTemplate.org")
           :if-new (file+head
                    "Projects/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: Project")
           :unnarrowed t)
          ("r" "Reference" plain
           (file "~/Notes/RoamTemplates/DefaultTemplate.org")
           :if-new (file+head
                    "Content/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: Reference")
           :unnarrowed t)
          ("t" "Tool" plain
           (file "~/Notes/RoamTemplates/DefaultTemplate.org")
           :if-new (file+head
                    "Content/${slug}.org"
                    "#+title: ${title}\n#+created: %U\n#+last_modified: %U\n#+filetags: Tool")
           :unnarrowed t)
        ))
       :bind (("C-c n l" . org-roam-buffer-toggle)
              ("C-c n f" . org-roam-node-find)
              ("C-c n i" . org-roam-node-insert))
       :config
       (org-roam-setup))

     (setq org-roam-node-display-template
           (concat "${title:*} "
                   (propertize "${tags:20}" 'face 'org-tag)))

   #+end_src

*** Org Roam UI
    The ~org-roam-ui~ package just adds a fancy web frontend to your ~org-roam~
    db that lets you explore your "brain". At the moment this is more just for
    fun but the project is constantly being developed and will become something
    great one day (I hope). Check out their GitHub for a better idea of what it
    looks like: [[https://github.com/org-roam/org-roam-ui][GitHub]].
    #+begin_src emacs-lisp
      (use-package org-roam-ui)

    #+end_src

* Markdown Configurations
  Here are some of the tweaks I have made to markdown-mode:
  #+begin_src emacs-lisp
    (add-hook 'markdown-mode-hook '(lambda () (setq fill-column 80)))
    (add-hook 'markdown-mode-hook 'turn-on-auto-fill)
    (add-hook 'markdown-mode-hook 'flyspell-mode)

  #+end_src

* Development Configurations
  This section will cover various packages and configurations I have setup for
  development work.

** Language Servers
   This section will cover the ~lsp-mode~ package and the various configurations
   I have setup to build my own IDE for various languages. The ~lsp-mode~
   package allows us to implement IDE-like functionality for many different
   programming languages via "language servers" that use the
   [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]]:
   #+begin_src emacs-lisp
     (defun heph/lsp-mode-setup ()
       (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
       (lsp-headerline-breadcrumb-mode))

     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :hook (lsp-mode . heph/lsp-mode-setup)
       :init
       (setq lsp-keymap-prefix "C-;")
       :config
       (lsp-enable-which-key-integration t))

   #+end_src

   I also use a simple package called ~lsp-ui~ to add some more pretty UI
   aspects to ~lsp-mode~:
   #+begin_src emacs-lisp
     (use-package lsp-ui
       :hook (lsp-mode . lsp-ui-mode)
       :custom
       (lsp-ui-doc-position 'bottom))

   #+end_src

   While we are on the topic of making ~lsp-mode~ look pretty I also have
   installed a package called ~lsp-treemacs~. I don't really use it much so I
   may remove it someday but it could be handy:
   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :after lsp)

   #+end_src
   Some of the commands to note about ~lsp-treemacs~ are:
   - lsp-treemacs-symbols:
     Show a tree view of the symbols in the current file.
   - lsp-treemacs-references:
     Show a tree view for the references of the symbol under the cursor.
   - lsp-treemacs-error-list:
     Show a tree view for the diagnostic messages in the project.

   Now that ~lsp-mode~ is installed you are almost ready to go. There are a lot
   of language servers that are installed already, however for some of them you
   will have to run the ~M-x lsp-install-server~ and select the language server
   you want to install. The full list of available language servers can be
   found: [[https://emacs-lsp.github.io/lsp-mode/page/languages/][here]].

   I also utilize a package called ~company-mode~. The ~company-mode~ package
   allows emacs to truly act like other IDEs and open a completion menu
   automatically to suggest completions for you. I also use the package
   ~company-box~ to show these suggested completions in a UI box:
   #+begin_src emacs-lisp
     (use-package company
       :after lsp-mode
       :hook (lsp-mode . company-mode)
       :bind (:map company-active-map
              ("<tab>" . company-complete-selection))
             (:map lsp-mode-map
              ("<tab>" . company-indent-or-complete-common))
       :custom
       (company-minimum-prefix-length 1)
       (company-idle-delay 0.0))

     (use-package company-box
       :hook (company-mode . company-box-mode))

   #+end_src

*** Jsonnet Language Server
    Since jsonnet isn't in the default list of available language servers for
    ~lsp-mode~ I define my own that I found from [[https://github.com/jdbaldry/jsonnet-language-server/blob/main/editor/jsonnet-language-server.el][here]]:
    #+begin_src emacs-lisp
      ;; jsonnet-language-server -- LSP registration for Emacs lsp-mode.
      ;; Commentary:
      ;; Code:
      (require 'jsonnet-mode)
      (require 'lsp-mode)

      (defcustom lsp-jsonnet-executable "jsonnet-language-server"
        "Command to start the Jsonnet language server."
        :group 'lsp-jsonnet
        :risky t
        :type 'file)

      ;; Configure lsp-mode language identifiers.
      (add-to-list 'lsp-language-id-configuration '(jsonnet-mode . "jsonnet"))
      (add-to-list 'lsp-language-id-configuration '(jsonnet-mode . "libsonnet"))

      ;; Register jsonnet-language-server with the LSP client.
      (lsp-register-client
       (make-lsp-client
        :new-connection (lsp-stdio-connection (lambda () lsp-jsonnet-executable))
        :activation-fn (lsp-activate-on (and "jsonnet" "libsonnet"))
        :server-id 'jsonnet))

      ;; Start the language server whenever jsonnet-mode is used.
      (add-hook 'jsonnet-mode-hook #'lsp-deferred)

      (provide 'jsonnet-language-server)
      ;;; jsonnet-language-server.el ends here

    #+end_src

** Language Packages
   This section will cover the different mode packages I use for the various
   development languages I work with:
   #+begin_src emacs-lisp
     (add-hook 'css-mode-hook
               (lambda()
                 (setq tab-width 2)
                 (setq css-indent-offset 2)))
     (add-hook 'css-mode-hook 'lsp)

     (add-hook 'html-mode-hook 'lsp)

     (add-hook 'js-mode-hook
               (lambda()
                 (setq tab-width 2)
                 (setq js-indent-level 2)))
     (add-hook 'js-mode-hook 'lsp)

     (add-hook 'python-mode-hook
               (lambda()
                 (setq tab-width 2)
                 (setq py-indent-offset 2)))

     (use-package docker-compose-mode)

     (use-package terraform-mode)

     (use-package typescript-mode
       :mode "\\.ts\\'"
       :hook (typescript-mode . lsp-deferred)
       :config
       (setq typescript-indent-level 2))

   #+end_src

** Magit Configuration
   The ~magit~ packages allows you to interact with git repositories and run all
   you git commands without having to leave emacs:
   #+begin_src emacs-lisp
     ;; magit configuration
     (use-package magit)

   #+end_src

* Misc Configuration
  This is just some minor tweaks that I have as well in my emacs config.
  #+begin_src emacs-lisp
    ;; auto-package-update lets you update your installed packages
    (use-package auto-package-update)

    ;; On MacOS make GUI emacs load user environment
    (use-package exec-path-from-shell)

    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))

  #+end_src

* EXWM Configuration
  The ~exwm~ package allows you to use emacs as a window manager. I broke out
  my ~exwm~ configuration into the [[./exwm/README.org][exwm directory]]. By doing this starting emacs
  without the start script found in the exwm directory will not load any ~exwm~
  specific configurations.
